"use strict";var B=Object.create;var $=Object.defineProperty;var N=Object.getOwnPropertyDescriptor;var U=Object.getOwnPropertyNames;var I=Object.getPrototypeOf,L=Object.prototype.hasOwnProperty;var H=(o,t)=>{for(var s in t)$(o,s,{get:t[s],enumerable:!0})},E=(o,t,s,a)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of U(t))!L.call(o,n)&&n!==s&&$(o,n,{get:()=>t[n],enumerable:!(a=N(t,n))||a.enumerable});return o};var k=(o,t,s)=>(s=o!=null?B(I(o)):{},E(t||!o||!o.__esModule?$(s,"default",{value:o,enumerable:!0}):s,o)),O=o=>E($({},"__esModule",{value:!0}),o);var G={};H(G,{activate:()=>S,deactivate:()=>Z});module.exports=O(G);var r=k(require("vscode")),e=k(require("path")),m=k(require("fs")),y=require("child_process");function W(){return"quarkdown"}function j(o){return o.replace(/[^a-zA-Z0-9-]/g,"-").replace(/--+/g,"-")}async function z(o){try{let s=(await m.promises.readFile(o,"utf8")).match(/^\.docname\s*\{\s*(.*?)\s*\}/m);if(s&&s[1])return s[1]}catch(t){console.error(`Error reading file ${o}:`,t)}return null}async function M(o,t,s){let a=W(),n=e.resolve(t),i=`${a} c ${o} "${n}"`;if(s){try{await m.promises.mkdir(s,{recursive:!0})}catch(d){throw r.window.showErrorMessage(`Failed to create output directory: ${d}`),d}i=`${a} c ${o} -o "${s}" "${t}"`}return new Promise((d,c)=>{(0,y.exec)(i,(l,f,u)=>{if(l){r.window.showErrorMessage(`Quarkdown command failed: ${l.message}
${u}`),c(l);return}u&&console.warn(`Quarkdown command stderr: ${u}`),console.log(`Quarkdown command stdout: ${f}`),d(f)})})}async function Q(o){return new Promise(t=>{(0,y.exec)("wmic path win32_mappedlogicaldisk get DeviceID,ProviderName /format:list",(s,a,n)=>{if(s)return console.warn(`Error getting mapped drives: ${s.message}`),t(null);let i=a.split(`
`);for(let d of i){let c=d.match(/DeviceID=([A-Z]:)/i),l=d.match(/ProviderName=(.*)/);if(c&&l&&c[1].toUpperCase()===o.toUpperCase()){let f=l[1].trim();return t(f)}}t(null)})})}async function A(o,t,s){let a=[],n=e.resolve(o),i=e.join(n,t);a.push(e.resolve(e.join(i,s)));let d=n.match(/^([a-zA-Z]):\\/);if(d){let c=d[1],l=await Q(`${c}:`);if(l){let f=n.substring(c.length+2),u=e.join(l,f),p=e.join(u,t);a.push(e.resolve(e.join(p,s)))}}return a}async function R(o,t){let s=[],a=e.resolve(o);s.push(e.resolve(e.join(a,t)));let n=a.match(/^([a-zA-Z]):\\/);if(n){let i=n[1],d=await Q(`${i}:`);if(d){let c=a.substring(i.length+2),l=e.join(d,c);s.push(e.resolve(e.join(l,t)))}}return s}async function C(o,t=5,s=500){for(let a=0;a<t;a++)try{return await m.promises.access(o,m.constants.F_OK),!0}catch(n){console.warn(`Attempt ${a+1}/${t}: File not found or inaccessible at ${o}: ${n.message}`),a<t-1&&await new Promise(i=>setTimeout(i,s))}return!1}function S(o){console.log("Quarkdown Slides extension is now active!");let t=r.commands.registerCommand("quarkdown-slides.preview",async()=>{let n=r.window.activeTextEditor;if(!n||n.document.languageId!=="quarkdown"){r.window.showWarningMessage("Please open a Quarkdown (.qd) file to preview.");return}if(n.document.isUntitled){r.window.showWarningMessage("Please save the Quarkdown file before previewing.");return}let i=n.document.fileName,d=e.dirname(i),c=e.join(d,"output"),l;try{l=await M("",i,c)}catch{return}let f="",u=await z(i),p="";u?p=j(u):p=j(e.basename(i,e.extname(i))),p===""&&(p="-");try{let x=(await m.promises.readdir(c,{withFileTypes:!0})).filter(h=>h.isDirectory()).map(h=>h.name),D=x.find(h=>h===p);if(D)f=e.join(c,D);else{r.window.showWarningMessage(`Expected folder "${p}" not found. Attempting to find the latest generated directory.`);let h="",F=new Date(0);for(let q of x){let b=e.join(c,q),T=await m.promises.stat(b);T.mtime>F&&(F=T.mtime,h=b)}if(h)f=h;else{r.window.showErrorMessage("Could not determine the specific output directory.");return}}}catch(P){r.window.showErrorMessage(`Failed to read output directory: ${P}`);return}let w=e.join(f,"index.html");if(!m.existsSync(w)){r.window.showErrorMessage(`Generated HTML file not found at ${w}.`);return}r.window.showInformationMessage(`Generated HTML to ${w}`);let g=r.window.createWebviewPanel("quarkdownPreview","Quarkdown Preview",r.ViewColumn.Beside,{enableScripts:!0,localResourceRoots:[r.Uri.file(e.dirname(w))]}),v=m.readFileSync(w,"utf8");v=v.replace(/(src|href)="(?!https?:\/\/)([^"]*)"/g,(P,x,D)=>{let h=r.Uri.file(e.resolve(e.dirname(w),D));return`${x}="${g.webview.asWebviewUri(h)}"`}),g.webview.html=v}),s=r.commands.registerCommand("quarkdown-slides.exportHtml",async()=>{let n=r.window.activeTextEditor;if(!n||n.document.languageId!=="quarkdown"){r.window.showWarningMessage("Please open a Quarkdown (.qd) file to export to HTML.");return}let i=n.document.fileName,d=e.dirname(i),c=e.join(d,"output");await m.promises.mkdir(c,{recursive:!0});let l="Untitled-Quarkdown-Document",u=n.document.getText().match(/^\.docname\s*\{\s*([^}]+)\s*\}/m);u&&u[1]&&(l=u[1].replace(/\s/g,"-")),await M("",i,c);let p=await A(c,l,"index.html"),w=null;for(let g of p)if(await C(g)){w=g;break}w?r.window.showInformationMessage(`Exported HTML to ${e.dirname(w)}`):r.window.showErrorMessage(`Could not find the exported HTML file at any expected path. Tried: ${p.join(", ")}.`)}),a=r.commands.registerCommand("quarkdown-slides.exportPdf",async()=>{let n=r.window.activeTextEditor;if(!n||n.document.languageId!=="quarkdown"){r.window.showWarningMessage("Please open a Quarkdown (.qd) file to export to PDF.");return}let i=n.document.fileName,d=e.dirname(i),c=e.join(d,"output");await m.promises.mkdir(c,{recursive:!0});let l="Untitled-Quarkdown-Document",u=n.document.getText().match(/^\.docname\s*\{\s*([^}]+)\s*\}/m);u&&u[1]&&(l=u[1].replace(/\s/g,"-")),await M("--pdf",i,c);let p=`${l}.pdf`,w=await R(c,p),g=null;for(let v of w)if(await C(v)){g=v;break}g?r.window.showInformationMessage(`Exported PDF to ${e.dirname(g)}`):r.window.showErrorMessage(`Could not find the exported PDF file at any expected path. Tried: ${w.join(", ")}.`)});o.subscriptions.push(t,s,a)}function Z(){}0&&(module.exports={activate,deactivate});

"use strict";var N=Object.create;var D=Object.defineProperty;var U=Object.getOwnPropertyDescriptor;var H=Object.getOwnPropertyNames;var I=Object.getPrototypeOf,L=Object.prototype.hasOwnProperty;var O=(o,n)=>{for(var r in n)D(o,r,{get:n[r],enumerable:!0})},T=(o,n,r,a)=>{if(n&&typeof n=="object"||typeof n=="function")for(let e of H(n))!L.call(o,e)&&e!==r&&D(o,e,{get:()=>n[e],enumerable:!(a=U(n,e))||a.enumerable});return o};var y=(o,n,r)=>(r=o!=null?N(I(o)):{},T(n||!o||!o.__esModule?D(r,"default",{value:o,enumerable:!0}):r,o)),W=o=>T(D({},"__esModule",{value:!0}),o);var G={};O(G,{activate:()=>R,deactivate:()=>Z});module.exports=W(G);var s=y(require("vscode")),t=y(require("path")),m=y(require("fs")),$=require("child_process");async function q(){return new Promise((o,n)=>{let r=process.platform==="win32"?"where quarkdown":"which quarkdown";(0,$.exec)(r,(a,e,i)=>{if(a){s.window.showErrorMessage(`Quarkdown command not found. Please ensure 'quarkdown' is installed and available in your system's PATH. Error: ${a.message}`),n(new Error("Quarkdown not found"));return}i&&console.warn(`Quarkdown path check stderr: ${i}`),o(e.trim().split(`
`)[0])})})}function Q(o){return o.replace(/[^a-zA-Z0-9-]/g,"-").replace(/--+/g,"-")}async function A(o){try{let r=(await m.promises.readFile(o,"utf8")).match(/^\.docname\s*\{\s*(.*?)\s*\}/m);if(r&&r[1])return r[1]}catch(n){console.error(`Error reading file ${o}:`,n)}return null}async function M(o,n,r){let a=await q(),e=t.resolve(n),i=`${a} c ${o} "${e}"`;if(r){try{await m.promises.mkdir(r,{recursive:!0})}catch(d){throw s.window.showErrorMessage(`Failed to create output directory: ${d}`),d}i=`${a} c ${o} -o "${r}" "${e}"`}return new Promise((d,c)=>{(0,$.exec)(i,(l,h,u)=>{if(l){s.window.showErrorMessage(`Quarkdown command failed: ${l.message}
${u}`),c(l);return}u&&console.warn(`Quarkdown command stderr: ${u}`),console.log(`Quarkdown command stdout: ${h}`),d(h)})})}async function C(o){return new Promise(n=>{(0,$.exec)("wmic path win32_mappedlogicaldisk get DeviceID,ProviderName /format:list",(r,a,e)=>{if(r)return console.warn(`Error getting mapped drives: ${r.message}`),n(null);let i=a.split(`
`);for(let d of i){let c=d.match(/DeviceID=([A-Z]:)/i),l=d.match(/ProviderName=(.*)/);if(c&&l&&c[1].toUpperCase()===o.toUpperCase()){let h=l[1].trim();return n(h)}}n(null)})})}async function S(o,n,r){let a=[],e=t.resolve(o),i=t.join(e,n);a.push(t.resolve(t.join(i,r)));let d=e.match(/^([a-zA-Z]):\\/);if(d){let c=d[1],l=await C(`${c}:`);if(l){let h=e.substring(c.length+2),u=t.join(l,h),w=t.join(u,n);a.push(t.resolve(t.join(w,r)))}}return a}async function z(o,n){let r=[],a=t.resolve(o);r.push(t.resolve(t.join(a,n)));let e=a.match(/^([a-zA-Z]):\\/);if(e){let i=e[1],d=await C(`${i}:`);if(d){let c=a.substring(i.length+2),l=t.join(d,c);r.push(t.resolve(t.join(l,n)))}}return r}async function j(o,n=5,r=500){for(let a=0;a<n;a++)try{return await m.promises.access(o,m.constants.F_OK),!0}catch(e){console.warn(`Attempt ${a+1}/${n}: File not found or inaccessible at ${o}: ${e.message}`),a<n-1&&await new Promise(i=>setTimeout(i,r))}return!1}async function R(o){console.log("Quarkdown Slides extension is now active!");try{await q()}catch{console.error("Failed to activate Quarkdown Slides extension due to missing Quarkdown command.");return}let n=s.commands.registerCommand("quarkdown-slides.preview",async()=>{let e=s.window.activeTextEditor;if(!e||e.document.languageId!=="quarkdown"){s.window.showWarningMessage("Please open a Quarkdown (.qd) file to preview.");return}if(e.document.isUntitled){s.window.showWarningMessage("Please save the Quarkdown file before previewing.");return}let i=e.document.fileName,d=t.dirname(i),c=t.join(d,"output"),l;try{l=await M("",i,c)}catch{return}let h="",u=await A(i),w="";u?w=Q(u):w=Q(t.basename(i,t.extname(i))),w===""&&(w="-");try{let x=(await m.promises.readdir(c,{withFileTypes:!0})).filter(f=>f.isDirectory()).map(f=>f.name),k=x.find(f=>f===w);if(k)h=t.join(c,k);else{s.window.showWarningMessage(`Expected folder "${w}" not found. Attempting to find the latest generated directory.`);let f="",F=new Date(0);for(let B of x){let b=t.join(c,B),E=await m.promises.stat(b);E.mtime>F&&(F=E.mtime,f=b)}if(f)h=f;else{s.window.showErrorMessage("Could not determine the specific output directory.");return}}}catch(P){s.window.showErrorMessage(`Failed to read output directory: ${P}`);return}let p=t.join(h,"index.html");if(!m.existsSync(p)){s.window.showErrorMessage(`Generated HTML file not found at ${p}.`);return}s.window.showInformationMessage(`Generated HTML to ${p}`);let g=s.window.createWebviewPanel("quarkdownPreview","Quarkdown Preview",s.ViewColumn.Beside,{enableScripts:!0,localResourceRoots:[s.Uri.file(t.dirname(p))]}),v=m.readFileSync(p,"utf8");v=v.replace(/(src|href)="(?!https?:\/\/)([^"]*)"/g,(P,x,k)=>{let f=s.Uri.file(t.resolve(t.dirname(p),k));return`${x}="${g.webview.asWebviewUri(f)}"`}),g.webview.html=v}),r=s.commands.registerCommand("quarkdown-slides.exportHtml",async()=>{let e=s.window.activeTextEditor;if(!e||e.document.languageId!=="quarkdown"){s.window.showWarningMessage("Please open a Quarkdown (.qd) file to export to HTML.");return}let i=e.document.fileName,d=t.dirname(i),c=t.join(d,"output");await m.promises.mkdir(c,{recursive:!0});let l="Untitled-Quarkdown-Document",u=e.document.getText().match(/^\.docname\s*\{\s*([^}]+)\s*\}/m);u&&u[1]&&(l=u[1].replace(/\s/g,"-")),await M("",i,c);let w=await S(c,l,"index.html"),p=null;for(let g of w)if(await j(g)){p=g;break}p?s.window.showInformationMessage(`Exported HTML to ${t.dirname(p)}`):s.window.showErrorMessage(`Could not find the exported HTML file at any expected path. Tried: ${w.join(", ")}.`)}),a=s.commands.registerCommand("quarkdown-slides.exportPdf",async()=>{let e=s.window.activeTextEditor;if(!e||e.document.languageId!=="quarkdown"){s.window.showWarningMessage("Please open a Quarkdown (.qd) file to export to PDF.");return}let i=e.document.fileName,d=t.dirname(i),c=t.join(d,"output");await m.promises.mkdir(c,{recursive:!0});let l="Untitled-Quarkdown-Document",u=e.document.getText().match(/^\.docname\s*\{\s*([^}]+)\s*\}/m);u&&u[1]&&(l=u[1].replace(/\s/g,"-")),await M("--pdf",i,c);let w=`${l}.pdf`,p=await z(c,w),g=null;for(let v of p)if(await j(v)){g=v;break}g?s.window.showInformationMessage(`Exported PDF to ${t.dirname(g)}`):s.window.showErrorMessage(`Could not find the exported PDF file at any expected path. Tried: ${p.join(", ")}.`)});o.subscriptions.push(n,r,a)}function Z(){}0&&(module.exports={activate,deactivate});
